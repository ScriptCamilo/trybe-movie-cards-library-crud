{"version":3,"sources":["components/Details.js","components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Details","this","props","rating","id","className","data-testid","to","Component","defaultProps","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","Number","React","Loading","movies","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","state","loading","getMovies","setState","type","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","match","params","movieAPI","details","NewMovie","shouldRedirect","EditMovie","isLoading","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c303a6b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass Details extends Component {\n  render() {\n    const { rating, id } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nDetails.propTypes = {\n  rating: PropTypes.number,\n  id: PropTypes.number.isRequired,\n};\n\nDetails.defaultProps = {\n  rating: 3,\n};\n\nexport default Details;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Details from './Details';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, id, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Details id={ id } rating={ Number(rating) } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <span>Carregando...</span>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\n// https://app.betrybe.com/course/front-end/ciclo-de-vida-de-componentes-e-react-router/ciclo-de-vida-de-componentes/36f2a45f-a7c0-4f6f-ae29-119286c4dce9/conteudos/6ff97820-f288-46e1-8a76-b870cb9f4402/renderizacao-condicional-e-atualizacao-de-arrays-no-estado/60fd32b9-3c45-4efa-a2e0-23c54e8bdac1?use_case=side_bar\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  getMovies() {\n    this.setState(\n      { loading: true },\n      async () => {\n        const movies = await movieAPI.getMovies();\n\n        this.setState({\n          loading: false,\n          movies,\n        });\n      },\n    );\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    return (\n      <div className=\"home-container\">\n        <header>\n          <h1>Movie Library</h1>\n          <button type=\"button\">\n            <Link to=\"/movies/new\">\n              ADICIONAR CARTÃO\n            </Link>\n          </button>\n        </header>\n\n        <main>\n          <ul data-testid=\"movie-list\">\n            {\n              loading ? <Loading />\n                : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)\n            }\n          </ul>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }),\n};\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: 0,\n    imagePath: '',\n  },\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.deleteMovie = this.deleteMovie.bind(this);\n\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  getMovie() {\n    const { match: { params: { id } } } = this.props;\n    this.setState(\n      { loading: true },\n      async () => {\n        const movie = await movieAPI.getMovie(id);\n\n        this.setState({\n          loading: false,\n          movie,\n        });\n      },\n    );\n  }\n\n  deleteMovie() {\n    const { deleteMovie } = movieAPI;\n    const { movie: { id } } = this.state;\n    deleteMovie(id);\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n    const { title, id, storyline, imagePath, genre, rating, subtitle } = movie;\n    const details = (\n      <>\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Title: ${title}` }</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <div>\n          <button type=\"button\"><Link to=\"/\">VOLTAR</Link></button>\n          <button type=\"button\"><Link to={ `/movies/${id}/edit` }>EDITAR</Link></button>\n          <button type=\"button\" onClick={ this.deleteMovie }>\n            <Link to=\"/\">DELETAR</Link>\n          </button>\n        </div>\n      </>\n    );\n\n    return (\n      <div data-testid=\"movie-details\">\n        {loading ? <Loading />\n          : details}\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    isExact: PropTypes.bool.isRequired,\n    params: PropTypes.shape({ id: PropTypes.string }).isRequired,\n    path: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n  }\n\n  async handleSubmit(newMovie) {\n    const { createMovie } = movieAPI;\n    await createMovie(newMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      isLoading: true,\n      shouldRedirect: false,\n      movie: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    await updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  getMovie() {\n    const { match: { params: { id } } } = this.props;\n    this.setState(\n      { isLoading: true },\n      async () => {\n        const movie = await movieAPI.getMovie(id);\n\n        this.setState({\n          isLoading: false,\n          movie,\n        });\n      },\n    );\n  }\n\n  render() {\n    const { isLoading, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (isLoading) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    isExact: PropTypes.bool.isRequired,\n    params: PropTypes.shape({ id: PropTypes.string }).isRequired,\n    path: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route component={ NotFound } />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}